#!/usr/bin/env ruby

# Usage: bin/convert [-k] [-r] kadai.md | pbcopy

require 'commonmarker'

class MyHtmlRenderer < CommonMarker::HtmlRenderer
  attr_reader :kakuyomu_kenten

  def initialize(options: :HARDBREAKS, extensions: [], kakuyomu_kenten: false)
    super(options: options, extensions: extensions)
    @kakuyomu_kenten = kakuyomu_kenten
  end

  def paragraph(node)
    if @in_tight && node.parent.type != :blockquote
      out(:children)
    else
      style = 'margin: 0;'

      first_text_node = nil
      node.walk do |child_node|
        if child_node.type == :text
          first_text_node = child_node
          break
        end
      end

      unless first_text_node.nil?
        if first_text_node.string_content.start_with?('　')
          first_text_node.string_content = first_text_node.string_content[1..-1]
        else
          style += ' text-indent: 0;'
        end
      end

      block do
        container(%(<p style="#{style}">), '</p>') do
          out(:children)
        end
      end
    end
  end

  def emph(node)
    return out('《《', :children, '》》') if kakuyomu_kenten

    text_node = node.first_child
    kenten_text = text_node.string_content.split('').map { |c| %(<span class="boten">#{c}</span>) }.join
    out('<em class="botenparent kuromaru" style="font-style: normal">', kenten_text, '</em>')
  end

  def hrule(node)
    block do
      out('<hr style="border: 0; height: 0; margin: .5em 0;" />')
    end
  end
end

require 'optparse'
require 'fuji_markdown'

options = {
  preprocessors: [FujiMarkdown::Preprocessors::Ruby.new],
  renderer: MyHtmlRenderer.new,
}

OptionParser.new do |opts|
  opts.on('-k', '--kakuyomu-kenten', 'Use Kakuyomu kenten') do
    options[:renderer] = MyHtmlRenderer.new(kakuyomu_kenten: true)
  end
  opts.on('-r', '--kakuyomu-ruby', 'Use Kakuyomu ruby') do
    options[:preprocessors] << Proc.new { |text| text.gsub!(/《/, '|《') }
    options[:postprocessors] = [FujiMarkdown::Postprocessors::Ruby.new(omit_start_symbol: true)]
  end
end.parse!

processor = FujiMarkdown::Processor.new(options)
puts processor.render(ARGF.read)
